{"version":3,"sources":["components/Recipe.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","src","alt","map","ingredient","text","App","useState","recipes","setRecipes","recipeList","setRecipeList","search","setSeacrh","query","setQuery","loader","setLoader","useEffect","getReciepes","message","a","fetch","response","json","data","console","log","hits","length","onSubmit","e","preventDefault","type","value","onChange","target","key","label","color","height","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"4PAiBeA,MAdf,YAAqD,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,YAClC,OACI,yBAAKC,UAAaC,IAAMC,QACpB,4CAAkBN,GAClB,0CAAgBC,GAChB,yBAAKG,UAAWC,IAAMH,MAAOK,IAAKL,EAAOM,IAAK,KAC9C,2CACA,4BACKL,EAAYM,KAAI,SAAAC,GAAU,OAAI,4BAAKA,EAAWC,Y,gBCwEhDC,MA9Ef,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMuBF,mBAAS,IANhC,mBAMNG,EANM,KAMMC,EANN,OAOeJ,mBAAS,IAPxB,mBAONK,EAPM,KAOEC,EAPF,OAQaN,mBAAS,WARtB,mBAQNO,EARM,KAQCC,EARD,OASeR,oBAAS,GATxB,mBASNS,EATM,KASEC,EATF,KAWbC,qBAAW,WACTC,IACAF,GAAU,KACV,CAACH,IAEJ,IA4BKM,EA5BCD,EAAW,uCAAG,8BAAAE,EAAA,sEACMC,MAAM,mCAAD,OAAoCR,EAApC,mBAff,WAee,oBAdd,qCAaG,cACXS,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBC,QAAQC,IAAIF,EAAKG,MACjBX,GAAU,GAEe,IAArBQ,EAAKG,KAAKC,QAEZlB,EAAc,GACdF,EAAW,MAGXA,EAAWgB,EAAKG,MAChBjB,EAAcc,EAAKG,KAAKC,SAbT,2CAAH,qDAoChB,OANET,EADgB,IAAfV,EACS,yBAAKZ,UAAU,WAAf,oBAGA,8BAIV,yBAAKA,UAAU,OACb,0BAAMA,UAAU,cAAcgC,SAfd,SAACC,GACpBA,EAAEC,iBACFjB,EAASH,GACTC,EAAU,MAaL,2BAAOf,UAAU,aAAamC,KAAK,OAAOC,MAAOtB,EAAQuB,SApBtC,SAACJ,GACzBlB,EAAUkB,EAAEK,OAAOF,UAoBd,4BAASpC,UAAU,gBAAgBmC,KAAM,UAAzC,WAEF,yBAAKnC,UAAU,UACbkB,EAAU,yBAAKlB,UAAU,WACZU,EAAQL,KAAI,SAAAH,GAAM,OACjB,kBAAC,EAAD,CACEqC,IAAKrC,EAAOA,OAAOsC,MACnB5C,MAASM,EAAOA,OAAOsC,MACvB3C,SAAYK,EAAOA,OAAOL,SAC1BC,MAASI,EAAOA,OAAOJ,MACvBC,YAAcG,EAAOA,OAAOH,kBAEzB,kBAAC,IAAD,CAAQoC,KAAK,eAAeM,MAAM,UAAUC,OAAQ,GAAIC,MAAO,MAGnFrB,IChEasB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMvC,a,kBExI5BwC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB","file":"static/js/main.08926be8.chunk.js","sourcesContent":["import React from 'react'\r\nimport style from '../recipe.module.css'\r\n\r\nfunction Recipe({title,calories,image,ingredients}) {\r\n    return (\r\n        <div className = {style.recipe}>\r\n            <h1> Dish Name : {title}</h1>\r\n            <p> Calories : {calories}</p>\r\n            <img className={style.image} src={image} alt =\"\" />\r\n            <h2>Ingredients</h2>\r\n            <ol>\r\n                {ingredients.map(ingredient => <li>{ingredient.text}</li>)}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './components/Recipe';\nimport Loader from 'react-loader-spinner';\n\nfunction App() {\n\n  const APP_ID = '8e74ec26';\n  const APP_KEY = '27fc9605413a7d54d9dfa7343ca620f0';\n\n  const [recipes, setRecipes] = useState([]);\n  const [recipeList, setRecipeList] = useState(10);\n  const [search, setSeacrh] = useState('');\n  const [query, setQuery] = useState('chicken');\n  const [loader, setLoader] = useState(false);\n\n  useEffect( () => {\n    getReciepes();\n    setLoader(false)\n  },[query]);\n\n const getReciepes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    console.log(data.hits);\n    setLoader(true)\n\n    if (data.hits.length === 0)\n    {\n      setRecipeList(0);\n      setRecipes([]);\n    }\n    else{\n      setRecipes(data.hits);\n      setRecipeList(data.hits.length);\n    }\n    \n    \n }\n\n const handleInputChange = (e) => {\n   setSeacrh(e.target.value);\n }\n\n const handleSubmit = (e) => {\n   e.preventDefault();\n   setQuery(search);\n   setSeacrh('');\n }\n  let message\n  if(recipeList === 0){\n    message = <div className=\"message\">Nothing Found :(</div>\n  }\n  else{\n    message = <div></div>\n  }\n  \n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={handleSubmit}>\n        <input className=\"search-bar\" type=\"text\" value={search} onChange ={handleInputChange} />\n        <button  className=\"search-button\" type =\"submit\">search</button>\n      </form>\n      <div className=\"loader\">\n       {loader ?  <div className=\"recipes\">\n                    {recipes.map(recipe => (\n                      <Recipe \n                        key={recipe.recipe.label} \n                        title = {recipe.recipe.label} \n                        calories = {recipe.recipe.calories} \n                        image = {recipe.recipe.image} \n                        ingredients ={recipe.recipe.ingredients}/>\n                    ))}\n                  </div> : <Loader type=\"BallTriangle\" color=\"#00BFFF\" height={80} width={80} />}\n      </div>\n\n      {message}\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n// This useEffect hooks looks for the state properties which is changed(they are given inside the square bracket).If nothing is given there,it will run only once after the component is mounted\n  // here counter is given,so useEffect will look for counter,if it is changed it will run\n  // useEffect( () => {\n  //   console.log(\"Effect has been run\");\n  // },[counter]);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3fMKF\",\"image\":\"recipe_image__1wKGU\"};"],"sourceRoot":""}